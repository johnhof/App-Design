package edu.pitt.cs1635.jmh162.prog2;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;

public class PaintView extends View implements OnTouchListener
{
	private static int color;
	Paint userPaint;
	Paint clearPaint;
	private ArrayList<Path> pathList;
	private ArrayList<Integer> colorPairs;
	private String pointString;
	float viewHeight;
	float viewWidth;
	
	public PaintView(Context context, AttributeSet attrs) {
		super(context, attrs);
        setFocusable(true);
        setFocusableInTouchMode(true);
        this.setOnTouchListener(this);
		
		color = Color.BLACK;
		userPaint = new Paint();
		clearPaint = new Paint();
		pathList = new ArrayList<Path>();
		colorPairs = new ArrayList<Integer>();
		
		//initialize paint objects
		clearPaint.setStyle(Paint.Style.FILL);
		clearPaint.setColor(Color.WHITE);
		userPaint.setStyle(Paint.Style.STROKE);
		userPaint.setColor(color);
        userPaint.setStrokeWidth(3);
        userPaint.setPathEffect(null);
        
        //format the string
        pointString = "[";
        
	}
	
	@Override
	protected void onDraw (Canvas canvas)
	{
		super.onDraw(canvas);
		
		//refresh userPaint objects
		userPaint.setStyle(Paint.Style.STROKE);
		
        for(int i = 0; i < pathList.size(); i++)
        {
    		userPaint.setColor(colorPairs.get(i));
        	canvas.drawPath(pathList.get(i), userPaint);	
        }
	}
	@Override
	public boolean onTouch(View v, MotionEvent event) 
	{
		int action = event.getAction();
		//if the event was a down event or add a new path to pathlist
		if(action == MotionEvent.ACTION_DOWN)
		{
			Path newPath = new Path();
			newPath.setLastPoint(event.getX(), event.getY());
			append((int)event.getX(), (int)event.getY());
			//error here
			pathList.add(newPath);
			colorPairs.add(color);
		}
		else if(action == MotionEvent.ACTION_MOVE)
		{
			pathList.get(pathList.size()-1).lineTo(event.getX(), event.getY());
			append((int)event.getX(), (int)event.getY());
		}
		invalidate();
				
		return true;
	}
	
	public static int getColor()
	{
		return color;
	}
	
	//empty path list and mark canvas invalid
	public void clear()
	{
		pathList = new ArrayList<Path>();
		colorPairs = new ArrayList<Integer>();
		invalidate();
	}

	public void setColor(int newcolor) 
	{
		color = newcolor;
	}
	
	public void append(float x, float y)
	{
        //get dimensions for point resizing of points
    	viewHeight = this.getHeight();
    	viewWidth = this.getWidth();
		if(pointString.contains(","))pointString+=", ";
		pointString+=((int)(x*(255.0/viewWidth)));
		pointString+=", "+((int)(y*(255.0/viewHeight)));
	}
	
	public String getFinalPointString()
	{
		//format the end of the string
		pointString+=", 255, 255]";
		return pointString;
	}
}
